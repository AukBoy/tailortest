{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// This file is a central place for all server actions.\n'use server'\n\nimport { createClient } from '@/lib/supabase/server'\nimport { headers } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { z } from 'zod';\nimport { type Customer, type MeasurementSet, type OrderStatus, type PaymentStatus } from '@/lib/types';\nimport { revalidatePath } from 'next/cache';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst signupSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport async function login(formData: FormData) {\n  const supabase = createClient()\n  const validatedFields = loginSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  \n  const { email, password } = validatedFields.data;\n\n  const { error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n\n  if (error) {\n    return { error: 'Could not authenticate user' };\n  }\n\n  return redirect('/dashboard');\n}\n\nexport async function signup(formData: FormData) {\n  const origin = headers().get('origin')\n  const supabase = createClient()\n  const validatedFields = signupSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n\n  const { email, password } = validatedFields.data;\n\n  const { error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      emailRedirectTo: `${origin}/auth/callback`,\n    },\n  })\n\n  if (error) {\n    return { error: 'Could not authenticate user' };\n  }\n\n  // For this app, we'll just log them in directly after sign up.\n  // In a real app, you'd likely want email confirmation.\n  await supabase.auth.signInWithPassword({ email, password });\n\n  return redirect('/dashboard');\n}\n\nexport async function logout() {\n  const supabase = createClient();\n  await supabase.auth.signOut();\n  return redirect('/login');\n}\n\n// Customer Actions\nconst customerFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  nic: z.string().min(5, \"NIC must be at least 5 characters.\"),\n  contact: z.string().min(5, \"Contact information is required.\"),\n  orderHistory: z.string().optional(),\n  preferences: z.string().optional(),\n});\n\nexport async function createCustomer(formData: FormData) {\n    const supabase = createClient();\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return { error: 'You must be logged in to create a customer.' };\n\n    const { error, data } = await supabase.from('customers').insert({\n        ...validatedFields.data,\n        user_id: user.id\n    }).select('id').single();\n\n    if (error) {\n        return { error: 'Failed to create customer.' };\n    }\n    \n    revalidatePath('/dashboard');\n    return redirect(`/dashboard/customer/${data.id}`);\n}\n\nexport async function updateCustomer(customerId: string, formData: FormData) {\n    const supabase = createClient();\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n    \n    const { error } = await supabase\n        .from('customers')\n        .update(validatedFields.data)\n        .eq('id', customerId);\n\n    if (error) {\n        return { error: 'Failed to update customer.' };\n    }\n\n    revalidatePath('/dashboard');\n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function deleteCustomer(customerId: string) {\n    const supabase = createClient();\n    const { error } = await supabase.from('customers').delete().eq('id', customerId);\n\n    if (error) {\n        return { error: 'Failed to delete customer.' };\n    }\n\n    revalidatePath('/dashboard');\n    return redirect('/dashboard');\n}\n\n\n// Measurement Actions\nexport async function addMeasurementSet(customerId: string, measurementSet: Omit<MeasurementSet, 'id' | 'date'>) {\n    const supabase = createClient();\n\n    const { error } = await supabase.from('measurement_sets').insert({\n        customer_id: customerId,\n        date: new Date().toISOString(),\n        measurements: measurementSet.measurements,\n        job_number: measurementSet.jobNumber,\n        request_date: measurementSet.requestDate,\n        payment_status: measurementSet.paymentStatus,\n        order_status: measurementSet.orderStatus,\n    });\n\n    if (error) {\n        console.error('Supabase error:', error);\n        return { error: 'Failed to add measurement set.' };\n    }\n    \n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function updateOrderStatus(setId: string, customerId: string, newStatus: OrderStatus) {\n    const supabase = createClient();\n\n    const updateData: { order_status: OrderStatus; completion_date?: string; handover_date?: string } = {\n        order_status: newStatus\n    };\n    if (newStatus === 'Completed') {\n        updateData.completion_date = new Date().toISOString();\n    } else if (newStatus === 'Handed Over') {\n        updateData.handover_date = new Date().toISOString();\n    }\n\n    const { error } = await supabase.from('measurement_sets').update(updateData).eq('id', setId);\n\n    if (error) {\n        return { error: 'Failed to update order status.' };\n    }\n\n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\n\nexport async function updatePaymentStatus(setId: string, customerId: string, newStatus: PaymentStatus) {\n    const supabase = createClient();\n\n    const { error } = await supabase.from('measurement_sets').update({ payment_status: newStatus }).eq('id', setId);\n\n    if (error) {\n        return { error: 'Failed to update payment status.' };\n    }\n\n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\n\n// Data Fetching\nexport async function getCustomers() {\n    const supabase = createClient();\n    const { data, error } = await supabase\n        .from('customers')\n        .select(`*, measurement_sets(job_number, order_status)`)\n        .order('created_at', { ascending: false });\n    \n    if (error) {\n        console.error(error);\n        return [];\n    }\n\n    // This is a bit of a hack to match the previous data structure for the search to work.\n    return data.map(c => ({\n        ...c,\n        measurementSets: c.measurement_sets\n    })) as Customer[];\n}\n\nexport async function getCustomerById(id: string): Promise<Customer | null> {\n    const supabase = createClient();\n    const { data, error } = await supabase\n        .from('customers')\n        .select(`\n            *,\n            measurement_sets (\n                id,\n                date,\n                measurements,\n                job_number,\n                request_date,\n                payment_status,\n                order_status,\n                completion_date,\n                handover_date\n            )\n        `)\n        .eq('id', id)\n        .single();\n\n    if (error) {\n        console.error(error);\n        return null;\n    }\n\n    const customer: Customer = {\n      id: data.id,\n      createdAt: data.created_at,\n      name: data.name,\n      nic: data.nic,\n      contact: data.contact,\n      orderHistory: data.order_history || '',\n      preferences: data.preferences || '',\n      measurementSets: data.measurement_sets.map(ms => ({\n        id: ms.id,\n        date: ms.date,\n        measurements: ms.measurements as any,\n        jobNumber: ms.job_number || undefined,\n        requestDate: ms.request_date || undefined,\n        paymentStatus: ms.payment_status as PaymentStatus,\n        orderStatus: ms.order_status as OrderStatus,\n        completionDate: ms.completion_date || undefined,\n        handoverDate: ms.handover_date || undefined,\n      }))\n    }\n    \n    return customer;\n}\n"],"names":[],"mappings":";;;;;;IAwEsB,SAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app-sidebar.tsx"],"sourcesContent":["'use client'\n\nimport Link from 'next/link';\nimport { Home, UserPlus, LogOut, LayoutGrid } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { usePathname } from 'next/navigation';\nimport { logout } from '@/app/actions';\n\nexport function AppSidebar() {\n  const pathname = usePathname();\n  \n  const navItems = [\n    { href: '/dashboard', label: 'Dashboard', icon: Home },\n    { href: '/dashboard/new', label: 'New Customer', icon: UserPlus },\n  ];\n\n  return (\n    <aside className=\"hidden md:flex w-64 bg-card border-r flex-col shadow-md\">\n      <div className=\"p-6 border-b flex items-center gap-2\">\n         <LayoutGrid className=\"h-8 w-8 text-primary\" />\n        <h1 className=\"text-2xl font-headline text-primary font-bold\">Style Gallery</h1>\n      </div>\n      <nav className=\"flex-1 p-4 space-y-1\">\n        {navItems.map((item) => (\n            <Button\n              key={item.label}\n              variant={pathname === item.href ? 'secondary' : 'ghost'}\n              className=\"w-full justify-start text-base\"\n              asChild\n            >\n              <Link href={item.href}>\n                <item.icon className=\"mr-3 h-5 w-5\" />\n                {item.label}\n              </Link>\n            </Button>\n        ))}\n      </nav>\n      <div className=\"p-4 mt-auto border-t\">\n        <form action={logout}>\n          <Button variant=\"outline\" className=\"w-full justify-start\" type=\"submit\">\n            <LogOut className=\"mr-3 h-5 w-5\" />\n            Logout\n          </Button>\n        </form>\n      </div>\n    </aside>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AANA;;;;;;;AAQO,SAAS;IACd,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,WAAW;QACf;YAAE,MAAM;YAAc,OAAO;YAAa,MAAM,mMAAA,CAAA,OAAI;QAAC;QACrD;YAAE,MAAM;YAAkB,OAAO;YAAgB,MAAM,8MAAA,CAAA,WAAQ;QAAC;KACjE;IAED,qBACE,8OAAC;QAAM,WAAU;;0BACf,8OAAC;gBAAI,WAAU;;kCACZ,8OAAC,kNAAA,CAAA,aAAU;wBAAC,WAAU;;;;;;kCACvB,8OAAC;wBAAG,WAAU;kCAAgD;;;;;;;;;;;;0BAEhE,8OAAC;gBAAI,WAAU;0BACZ,SAAS,GAAG,CAAC,CAAC,qBACX,8OAAC,kIAAA,CAAA,SAAM;wBAEL,SAAS,aAAa,KAAK,IAAI,GAAG,cAAc;wBAChD,WAAU;wBACV,OAAO;kCAEP,cAAA,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAM,KAAK,IAAI;;8CACnB,8OAAC,KAAK,IAAI;oCAAC,WAAU;;;;;;gCACpB,KAAK,KAAK;;;;;;;uBAPR,KAAK,KAAK;;;;;;;;;;0BAYvB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAK,QAAQ,kJAAA,CAAA,SAAM;8BAClB,cAAA,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAQ;wBAAU,WAAU;wBAAuB,MAAK;;0CAC9D,8OAAC,0MAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;;;;;;;;;;;AAO/C","debugId":null}}]
}