{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// This file is a central place for all server actions.\n'use server'\n\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { z } from 'zod';\nimport { type Customer, type MeasurementSet, type OrderStatus, type PaymentStatus } from '@/lib/types';\nimport { revalidatePath } from 'next/cache';\n\n// --- In-Memory Database ---\n// This is a simple in-memory database. Data will be reset on server restart.\nlet customers: Customer[] = [];\nlet nextCustomerId = 1;\nlet nextMeasurementSetId = 1;\n\n// Seed with some initial data for demonstration\nif (customers.length === 0) {\n    customers.push({\n        id: String(nextCustomerId++),\n        createdAt: new Date('2023-10-26T10:00:00Z').toISOString(),\n        name: 'Jane Doe',\n        nic: '199012345V',\n        contact: 'jane.doe@example.com',\n        orderHistory: '2 slim-fit shirts (blue, white), 1 pair of trousers (grey)',\n        preferences: 'Prefers classic colors, comfortable fit, and natural fabrics like cotton and linen.',\n        measurementSets: [\n            {\n                id: String(nextMeasurementSetId++),\n                date: new Date('2023-11-15T11:00:00Z').toISOString(),\n                measurements: [\n                    { label: \"Chest\", value: 36 },\n                    { label: \"Waist\", value: 28 },\n                    { label: \"Hips\", value: 38 },\n                    { label: \"Sleeve Length\", value: 23 },\n                ],\n                jobNumber: 'A-101',\n                requestDate: new Date('2023-11-10T09:00:00Z').toISOString(),\n                paymentStatus: 'Paid',\n                orderStatus: 'Handed Over',\n                completionDate: new Date('2023-11-25T17:00:00Z').toISOString(),\n                handoverDate: new Date('2023-11-26T12:00:00Z').toISOString(),\n            }\n        ]\n    });\n}\n// --- End of In-Memory Database ---\n\n\n// Auth Actions (Simplified for local development)\nconst adminUser = { email: 'admin@example.com', password: 'password' };\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst signupSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n\nexport async function login(formData: FormData) {\n  const validatedFields = loginSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  \n  const { email, password } = validatedFields.data;\n\n  // In a real app, use a secure auth provider. This is for demonstration only.\n  if (email === adminUser.email && password === adminUser.password) {\n    cookies().set('session', 'true', { httpOnly: true, path: '/' });\n    return redirect('/dashboard');\n  }\n\n  return { error: 'Invalid email or password. Hint: admin@example.com / password' };\n}\n\nexport async function signup(formData: FormData) {\n  // This is a mock signup. In this local version, there's only one admin.\n  // We'll treat signup as a login attempt. The form suggests creating an account\n  // but for local dev, we just have one.\n  const validatedFields = signupSchema.safeParse(Object.fromEntries(formData.entries()));\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  return { error: \"This is a local version with one admin account. Please use the login form.\" };\n}\n\nexport async function logout() {\n  cookies().set('session', '', { expires: new Date(0), path: '/' });\n  return redirect('/login');\n}\n\nexport async function checkAuth() {\n    const session = cookies().get('session');\n    if (!session?.value) {\n        redirect('/login');\n    }\n}\n\nexport async function isLoggedIn() {\n    const session = cookies().get('session');\n    return !!session?.value;\n}\n\n\n// Customer Actions\nconst customerFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  nic: z.string().min(5, \"NIC must be at least 5 characters.\"),\n  contact: z.string().min(5, \"Contact information is required.\"),\n  orderHistory: z.string().optional(),\n  preferences: z.string().optional(),\n});\n\nexport async function createCustomer(formData: FormData) {\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n    \n    const newCustomerData = validatedFields.data;\n\n    const newCustomer: Customer = {\n        ...newCustomerData,\n        id: String(nextCustomerId++),\n        createdAt: new Date().toISOString(),\n        measurementSets: [],\n    };\n    customers.push(newCustomer);\n    \n    revalidatePath('/dashboard');\n    return redirect(`/dashboard/customer/${newCustomer.id}`);\n}\n\nexport async function updateCustomer(customerId: string, formData: FormData) {\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n\n    const customerIndex = customers.findIndex(c => c.id === customerId);\n    if (customerIndex === -1) {\n        return { error: 'Customer not found.' };\n    }\n    \n    customers[customerIndex] = { ...customers[customerIndex], ...validatedFields.data };\n\n    revalidatePath('/dashboard');\n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function deleteCustomer(customerId: string) {\n    const initialLength = customers.length;\n    customers = customers.filter(c => c.id !== customerId);\n\n    if (customers.length === initialLength) {\n        return { error: 'Failed to delete customer.' };\n    }\n\n    revalidatePath('/dashboard');\n    return redirect('/dashboard');\n}\n\n\n// Measurement Actions\nexport async function addMeasurementSet(customerId: string, measurementSet: Omit<MeasurementSet, 'id' | 'date'>) {\n    const customer = customers.find(c => c.id === customerId);\n    if (!customer) {\n        return { error: 'Customer not found.' };\n    }\n\n    const newSet: MeasurementSet = {\n        ...measurementSet,\n        id: String(nextMeasurementSetId++),\n        date: new Date().toISOString(),\n    };\n    customer.measurementSets.push(newSet);\n    \n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function updateOrderStatus(setId: string, customerId: string, newStatus: OrderStatus) {\n    for (const customer of customers) {\n        const set = customer.measurementSets.find(s => s.id === setId);\n        if (set) {\n            set.orderStatus = newStatus;\n            if (newStatus === 'Completed') {\n                set.completionDate = new Date().toISOString();\n            } else if (newStatus === 'Handed Over') {\n                set.handoverDate = new Date().toISOString();\n            }\n            revalidatePath(`/dashboard/customer/${customerId}`);\n            return { success: true };\n        }\n    }\n    return { error: 'Failed to update order status.' };\n}\n\nexport async function updatePaymentStatus(setId: string, customerId: string, newStatus: PaymentStatus) {\n    for (const customer of customers) {\n        const set = customer.measurementSets.find(s => s.id === setId);\n        if (set) {\n            set.paymentStatus = newStatus;\n            revalidatePath(`/dashboard/customer/${customerId}`);\n            return { success: true };\n        }\n    }\n    return { error: 'Failed to update payment status.' };\n}\n\n\n// Data Fetching\nexport async function getCustomers() {\n    // Return a deep copy to prevent direct mutation of the in-memory data\n    return JSON.parse(JSON.stringify(customers)) as Customer[];\n}\n\nexport async function getCustomerById(id: string): Promise<Customer | null> {\n    const customer = customers.find(c => c.id === id);\n    if (!customer) {\n        return null;\n    }\n    // Return a deep copy\n    return JSON.parse(JSON.stringify(customer));\n}\n"],"names":[],"mappings":";;;;;;IAsHsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// This file is a central place for all server actions.\n'use server'\n\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { z } from 'zod';\nimport { type Customer, type MeasurementSet, type OrderStatus, type PaymentStatus } from '@/lib/types';\nimport { revalidatePath } from 'next/cache';\n\n// --- In-Memory Database ---\n// This is a simple in-memory database. Data will be reset on server restart.\nlet customers: Customer[] = [];\nlet nextCustomerId = 1;\nlet nextMeasurementSetId = 1;\n\n// Seed with some initial data for demonstration\nif (customers.length === 0) {\n    customers.push({\n        id: String(nextCustomerId++),\n        createdAt: new Date('2023-10-26T10:00:00Z').toISOString(),\n        name: 'Jane Doe',\n        nic: '199012345V',\n        contact: 'jane.doe@example.com',\n        orderHistory: '2 slim-fit shirts (blue, white), 1 pair of trousers (grey)',\n        preferences: 'Prefers classic colors, comfortable fit, and natural fabrics like cotton and linen.',\n        measurementSets: [\n            {\n                id: String(nextMeasurementSetId++),\n                date: new Date('2023-11-15T11:00:00Z').toISOString(),\n                measurements: [\n                    { label: \"Chest\", value: 36 },\n                    { label: \"Waist\", value: 28 },\n                    { label: \"Hips\", value: 38 },\n                    { label: \"Sleeve Length\", value: 23 },\n                ],\n                jobNumber: 'A-101',\n                requestDate: new Date('2023-11-10T09:00:00Z').toISOString(),\n                paymentStatus: 'Paid',\n                orderStatus: 'Handed Over',\n                completionDate: new Date('2023-11-25T17:00:00Z').toISOString(),\n                handoverDate: new Date('2023-11-26T12:00:00Z').toISOString(),\n            }\n        ]\n    });\n}\n// --- End of In-Memory Database ---\n\n\n// Auth Actions (Simplified for local development)\nconst adminUser = { email: 'admin@example.com', password: 'password' };\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst signupSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n\nexport async function login(formData: FormData) {\n  const validatedFields = loginSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  \n  const { email, password } = validatedFields.data;\n\n  // In a real app, use a secure auth provider. This is for demonstration only.\n  if (email === adminUser.email && password === adminUser.password) {\n    cookies().set('session', 'true', { httpOnly: true, path: '/' });\n    return redirect('/dashboard');\n  }\n\n  return { error: 'Invalid email or password. Hint: admin@example.com / password' };\n}\n\nexport async function signup(formData: FormData) {\n  // This is a mock signup. In this local version, there's only one admin.\n  // We'll treat signup as a login attempt. The form suggests creating an account\n  // but for local dev, we just have one.\n  const validatedFields = signupSchema.safeParse(Object.fromEntries(formData.entries()));\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  return { error: \"This is a local version with one admin account. Please use the login form.\" };\n}\n\nexport async function logout() {\n  cookies().set('session', '', { expires: new Date(0), path: '/' });\n  return redirect('/login');\n}\n\nexport async function checkAuth() {\n    const session = cookies().get('session');\n    if (!session?.value) {\n        redirect('/login');\n    }\n}\n\nexport async function isLoggedIn() {\n    const session = cookies().get('session');\n    return !!session?.value;\n}\n\n\n// Customer Actions\nconst customerFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  nic: z.string().min(5, \"NIC must be at least 5 characters.\"),\n  contact: z.string().min(5, \"Contact information is required.\"),\n  orderHistory: z.string().optional(),\n  preferences: z.string().optional(),\n});\n\nexport async function createCustomer(formData: FormData) {\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n    \n    const newCustomerData = validatedFields.data;\n\n    const newCustomer: Customer = {\n        ...newCustomerData,\n        id: String(nextCustomerId++),\n        createdAt: new Date().toISOString(),\n        measurementSets: [],\n    };\n    customers.push(newCustomer);\n    \n    revalidatePath('/dashboard');\n    return redirect(`/dashboard/customer/${newCustomer.id}`);\n}\n\nexport async function updateCustomer(customerId: string, formData: FormData) {\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n\n    const customerIndex = customers.findIndex(c => c.id === customerId);\n    if (customerIndex === -1) {\n        return { error: 'Customer not found.' };\n    }\n    \n    customers[customerIndex] = { ...customers[customerIndex], ...validatedFields.data };\n\n    revalidatePath('/dashboard');\n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function deleteCustomer(customerId: string) {\n    const initialLength = customers.length;\n    customers = customers.filter(c => c.id !== customerId);\n\n    if (customers.length === initialLength) {\n        return { error: 'Failed to delete customer.' };\n    }\n\n    revalidatePath('/dashboard');\n    return redirect('/dashboard');\n}\n\n\n// Measurement Actions\nexport async function addMeasurementSet(customerId: string, measurementSet: Omit<MeasurementSet, 'id' | 'date'>) {\n    const customer = customers.find(c => c.id === customerId);\n    if (!customer) {\n        return { error: 'Customer not found.' };\n    }\n\n    const newSet: MeasurementSet = {\n        ...measurementSet,\n        id: String(nextMeasurementSetId++),\n        date: new Date().toISOString(),\n    };\n    customer.measurementSets.push(newSet);\n    \n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function updateOrderStatus(setId: string, customerId: string, newStatus: OrderStatus) {\n    for (const customer of customers) {\n        const set = customer.measurementSets.find(s => s.id === setId);\n        if (set) {\n            set.orderStatus = newStatus;\n            if (newStatus === 'Completed') {\n                set.completionDate = new Date().toISOString();\n            } else if (newStatus === 'Handed Over') {\n                set.handoverDate = new Date().toISOString();\n            }\n            revalidatePath(`/dashboard/customer/${customerId}`);\n            return { success: true };\n        }\n    }\n    return { error: 'Failed to update order status.' };\n}\n\nexport async function updatePaymentStatus(setId: string, customerId: string, newStatus: PaymentStatus) {\n    for (const customer of customers) {\n        const set = customer.measurementSets.find(s => s.id === setId);\n        if (set) {\n            set.paymentStatus = newStatus;\n            revalidatePath(`/dashboard/customer/${customerId}`);\n            return { success: true };\n        }\n    }\n    return { error: 'Failed to update payment status.' };\n}\n\n\n// Data Fetching\nexport async function getCustomers() {\n    // Return a deep copy to prevent direct mutation of the in-memory data\n    return JSON.parse(JSON.stringify(customers)) as Customer[];\n}\n\nexport async function getCustomerById(id: string): Promise<Customer | null> {\n    const customer = customers.find(c => c.id === id);\n    if (!customer) {\n        return null;\n    }\n    // Return a deep copy\n    return JSON.parse(JSON.stringify(customer));\n}\n"],"names":[],"mappings":";;;;;;IA2IsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/customer-form.tsx"],"sourcesContent":["'use client';\n\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { type Customer } from \"@/lib/types\";\nimport { Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { createCustomer, updateCustomer } from '@/app/actions';\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useRouter } from \"next/navigation\";\n\nconst formSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  nic: z.string().min(5, \"NIC must be at least 5 characters.\"),\n  contact: z.string().min(5, \"Contact information is required.\"),\n  orderHistory: z.string().optional(),\n  preferences: z.string().optional(),\n});\n\ntype CustomerFormValues = z.infer<typeof formSchema>;\n\ninterface CustomerFormProps {\n    customer?: Customer;\n    onSave?: () => void;\n}\n\nexport function CustomerForm({ customer, onSave }: CustomerFormProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const isEditMode = !!customer;\n\n  const form = useForm<CustomerFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: isEditMode && customer ? {\n        name: customer.name,\n        nic: customer.nic,\n        contact: customer.contact,\n        orderHistory: customer.orderHistory,\n        preferences: customer.preferences,\n    } : {\n        name: \"\",\n        nic: \"\",\n        contact: \"\",\n        orderHistory: \"\",\n        preferences: \"\",\n    },\n  });\n\n  async function onSubmit(data: CustomerFormValues) {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value) {\n        formData.append(key, value);\n      }\n    });\n\n    if (isEditMode && customer) {\n      const result = await updateCustomer(customer.id, formData);\n      if (result.error) {\n        toast({\n            variant: \"destructive\",\n            title: \"Update Failed\",\n            description: result.error,\n        });\n      } else {\n        toast({\n            title: \"Customer Updated!\",\n            description: `${data.name}'s profile has been successfully updated.`,\n        });\n        if(onSave) onSave();\n      }\n    } else {\n      const result = await createCustomer(formData);\n      if (result?.error) {\n         toast({\n            variant: \"destructive\",\n            title: \"Creation Failed\",\n            description: result.error,\n        });\n      } else {\n         toast({\n            title: \"Customer Added!\",\n            description: `${data.name} has been successfully added to your records.`,\n        });\n      }\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-headline text-2xl\">Personal Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid md:grid-cols-2 gap-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Jane Doe\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"nic\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>NIC Number</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., 123456789V\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"contact\"\n              render={({ field }) => (\n                <FormItem className=\"md:col-span-2\">\n                  <FormLabel>Contact Info (Phone/Email)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., 0771234567 or jane@example.com\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-headline text-2xl\">Style Profile</CardTitle>\n            <CardDescription>This information helps the AI recommender. (Optional)</CardDescription>\n          </CardHeader>\n          <CardContent className=\"grid md:grid-cols-2 gap-6\">\n            <FormField\n              control={form.control}\n              name=\"orderHistory\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Order History</FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"e.g., 2 slim-fit shirts, 1 pair of trousers\" {...field} value={field.value ?? ''} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"preferences\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Style Preferences</FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"e.g., Prefers classic colors, comfortable fit, natural fabrics.\" {...field} value={field.value ?? ''} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end\">\n            <Button type=\"submit\" size=\"lg\">\n                <Save className=\"mr-2 h-4 w-4\" />\n                {isEditMode ? \"Save Changes\" : \"Create Customer\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 785, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/new/page.tsx"],"sourcesContent":["'use client'\n\nimport { CustomerForm } from '@/components/customer-form';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Home, UserPlus } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\n\nexport default function NewCustomerPage() {\n  const router = useRouter();\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <div className=\"flex gap-2\">\n        <Button variant=\"outline\" onClick={() => router.back()}><ArrowLeft className=\"mr-2 h-4 w-4\" /> Back</Button>\n        <Button variant=\"outline\" onClick={() => router.push('/dashboard')}><Home className=\"mr-2 h-4 w-4\" /> Home</Button>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <UserPlus className=\"h-8 w-8 text-primary\" />\n        <div>\n            <h1 className=\"text-3xl lg:text-4xl font-headline font-bold\">New Customer Profile</h1>\n            <p className=\"text-muted-foreground mt-1\">Add a new customer and their measurements to the system.</p>\n        </div>\n      </div>\n      <CustomerForm />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAQ;wBAAU,SAAS,IAAM,OAAO,IAAI;;0CAAI,8OAAC,gNAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;kCAC9F,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAQ;wBAAU,SAAS,IAAM,OAAO,IAAI,CAAC;;0CAAe,8OAAC,mMAAA,CAAA,OAAI;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;0BAEvG,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,8MAAA,CAAA,WAAQ;wBAAC,WAAU;;;;;;kCACpB,8OAAC;;0CACG,8OAAC;gCAAG,WAAU;0CAA+C;;;;;;0CAC7D,8OAAC;gCAAE,WAAU;0CAA6B;;;;;;;;;;;;;;;;;;0BAGhD,8OAAC,sIAAA,CAAA,eAAY;;;;;;;;;;;AAGnB","debugId":null}}]
}