{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app-sidebar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AppSidebar = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppSidebar() from the server but AppSidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/app-sidebar.tsx <module evaluation>\",\n    \"AppSidebar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,gEACA","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/app-sidebar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AppSidebar = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppSidebar() from the server but AppSidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/app-sidebar.tsx\",\n    \"AppSidebar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,4CACA","debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// This file is a central place for all server actions.\n'use server'\n\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { z } from 'zod';\nimport { type Customer, type MeasurementSet, type OrderStatus, type PaymentStatus } from '@/lib/types';\nimport { revalidatePath } from 'next/cache';\n\n// --- In-Memory Database ---\n// This is a simple in-memory database. Data will be reset on server restart.\nlet customers: Customer[] = [];\nlet nextCustomerId = 1;\nlet nextMeasurementSetId = 1;\n\n// Seed with some initial data for demonstration\nif (customers.length === 0) {\n    customers.push({\n        id: String(nextCustomerId++),\n        createdAt: new Date('2023-10-26T10:00:00Z').toISOString(),\n        name: 'Jane Doe',\n        nic: '199012345V',\n        contact: 'jane.doe@example.com',\n        orderHistory: '2 slim-fit shirts (blue, white), 1 pair of trousers (grey)',\n        preferences: 'Prefers classic colors, comfortable fit, and natural fabrics like cotton and linen.',\n        measurementSets: [\n            {\n                id: String(nextMeasurementSetId++),\n                date: new Date('2023-11-15T11:00:00Z').toISOString(),\n                measurements: [\n                    { label: \"Chest\", value: 36 },\n                    { label: \"Waist\", value: 28 },\n                    { label: \"Hips\", value: 38 },\n                    { label: \"Sleeve Length\", value: 23 },\n                ],\n                jobNumber: 'A-101',\n                requestDate: new Date('2023-11-10T09:00:00Z').toISOString(),\n                paymentStatus: 'Paid',\n                orderStatus: 'Handed Over',\n                completionDate: new Date('2023-11-25T17:00:00Z').toISOString(),\n                handoverDate: new Date('2023-11-26T12:00:00Z').toISOString(),\n            }\n        ]\n    });\n}\n// --- End of In-Memory Database ---\n\n\n// Auth Actions (Simplified for local development)\nconst adminUser = { email: 'admin@example.com', password: 'password' };\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst signupSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n\nexport async function login(formData: FormData) {\n  const validatedFields = loginSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  \n  const { email, password } = validatedFields.data;\n\n  // In a real app, use a secure auth provider. This is for demonstration only.\n  if (email === adminUser.email && password === adminUser.password) {\n    cookies().set('session', 'true', { httpOnly: true, path: '/' });\n    return redirect('/dashboard');\n  }\n\n  return { error: 'Invalid email or password. Hint: admin@example.com / password' };\n}\n\nexport async function signup(formData: FormData) {\n  // This is a mock signup. In this local version, there's only one admin.\n  // We'll treat signup as a login attempt. The form suggests creating an account\n  // but for local dev, we just have one.\n  const validatedFields = signupSchema.safeParse(Object.fromEntries(formData.entries()));\n  if (!validatedFields.success) {\n    return { error: 'Invalid fields' };\n  }\n  return { error: \"This is a local version with one admin account. Please use the login form.\" };\n}\n\nexport async function logout() {\n  cookies().set('session', '', { expires: new Date(0), path: '/' });\n  return redirect('/login');\n}\n\nexport async function checkAuth() {\n    const session = cookies().get('session');\n    if (!session?.value) {\n        redirect('/login');\n    }\n}\n\nexport async function isLoggedIn() {\n    const session = cookies().get('session');\n    return !!session?.value;\n}\n\n\n// Customer Actions\nconst customerFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  nic: z.string().min(5, \"NIC must be at least 5 characters.\"),\n  contact: z.string().min(5, \"Contact information is required.\"),\n  orderHistory: z.string().optional(),\n  preferences: z.string().optional(),\n});\n\nexport async function createCustomer(formData: FormData) {\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n    \n    const newCustomerData = validatedFields.data;\n\n    const newCustomer: Customer = {\n        ...newCustomerData,\n        id: String(nextCustomerId++),\n        createdAt: new Date().toISOString(),\n        measurementSets: [],\n    };\n    customers.push(newCustomer);\n    \n    revalidatePath('/dashboard');\n    return redirect(`/dashboard/customer/${newCustomer.id}`);\n}\n\nexport async function updateCustomer(customerId: string, formData: FormData) {\n    const validatedFields = customerFormSchema.safeParse(Object.fromEntries(formData.entries()));\n\n    if (!validatedFields.success) {\n        return { error: 'Invalid fields', fields: validatedFields.error.flatten().fieldErrors };\n    }\n\n    const customerIndex = customers.findIndex(c => c.id === customerId);\n    if (customerIndex === -1) {\n        return { error: 'Customer not found.' };\n    }\n    \n    customers[customerIndex] = { ...customers[customerIndex], ...validatedFields.data };\n\n    revalidatePath('/dashboard');\n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function deleteCustomer(customerId: string) {\n    const initialLength = customers.length;\n    customers = customers.filter(c => c.id !== customerId);\n\n    if (customers.length === initialLength) {\n        return { error: 'Failed to delete customer.' };\n    }\n\n    revalidatePath('/dashboard');\n    return redirect('/dashboard');\n}\n\n\n// Measurement Actions\nexport async function addMeasurementSet(customerId: string, measurementSet: Omit<MeasurementSet, 'id' | 'date'>) {\n    const customer = customers.find(c => c.id === customerId);\n    if (!customer) {\n        return { error: 'Customer not found.' };\n    }\n\n    const newSet: MeasurementSet = {\n        ...measurementSet,\n        id: String(nextMeasurementSetId++),\n        date: new Date().toISOString(),\n    };\n    customer.measurementSets.push(newSet);\n    \n    revalidatePath(`/dashboard/customer/${customerId}`);\n    return { success: true };\n}\n\nexport async function updateOrderStatus(setId: string, customerId: string, newStatus: OrderStatus) {\n    for (const customer of customers) {\n        const set = customer.measurementSets.find(s => s.id === setId);\n        if (set) {\n            set.orderStatus = newStatus;\n            if (newStatus === 'Completed') {\n                set.completionDate = new Date().toISOString();\n            } else if (newStatus === 'Handed Over') {\n                set.handoverDate = new Date().toISOString();\n            }\n            revalidatePath(`/dashboard/customer/${customerId}`);\n            return { success: true };\n        }\n    }\n    return { error: 'Failed to update order status.' };\n}\n\nexport async function updatePaymentStatus(setId: string, customerId: string, newStatus: PaymentStatus) {\n    for (const customer of customers) {\n        const set = customer.measurementSets.find(s => s.id === setId);\n        if (set) {\n            set.paymentStatus = newStatus;\n            revalidatePath(`/dashboard/customer/${customerId}`);\n            return { success: true };\n        }\n    }\n    return { error: 'Failed to update payment status.' };\n}\n\n\n// Data Fetching\nexport async function getCustomers() {\n    // Return a deep copy to prevent direct mutation of the in-memory data\n    return JSON.parse(JSON.stringify(customers)) as Customer[];\n}\n\nexport async function getCustomerById(id: string): Promise<Customer | null> {\n    const customer = customers.find(c => c.id === id);\n    if (!customer) {\n        return null;\n    }\n    // Return a deep copy\n    return JSON.parse(JSON.stringify(customer));\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/layout.tsx"],"sourcesContent":["import { AppSidebar } from '@/components/app-sidebar';\nimport { checkAuth } from '@/app/actions';\n\nexport default async function DashboardLayout({ children }: { children: React.ReactNode }) {\n  await checkAuth();\n\n  return (\n    <div className=\"flex min-h-screen bg-background text-foreground\">\n      <AppSidebar />\n      <main className=\"flex-1 p-4 sm:p-6 md:p-8 overflow-auto\">\n        {children}\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe,gBAAgB,EAAE,QAAQ,EAAiC;IACvF,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD;IAEd,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,oIAAA,CAAA,aAAU;;;;;0BACX,8OAAC;gBAAK,WAAU;0BACb;;;;;;;;;;;;AAIT","debugId":null}}]
}